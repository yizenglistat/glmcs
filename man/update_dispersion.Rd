% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{update_dispersion}
\alias{update_dispersion}
\title{Update the Dispersion (Scale) Parameter for GLMs}
\usage{
update_dispersion(y, family = gaussian(), offset = 0, approach = "pearson")
}
\arguments{
\item{y}{Numeric vector of responses.  For Cox models, supply the event times
(first column) if \code{family$family == "cox"}.}

\item{family}{A \code{stats::family} object (e.g. \code{gaussian()}, \code{Gamma()},
\code{inverse.gaussian()}).  Must include \code{linkinv} and \code{variance} methods,
and—if \code{approach = "deviance"}—a \code{dev.resids} method.}

\item{offset}{Numeric scalar or vector of linear predictors.  If scalar, recycled
to length \code{length(y)} before applying the inverse link to compute \eqn{\mu}.}

\item{approach}{Character string, either \code{"pearson"} (default) to use Pearson
residuals, or \code{"deviance"} to use deviance residuals.}
}
\value{
Numeric scalar giving the estimated dispersion:
\describe{
\item{Gaussian, Gamma, inverse Gaussian}{Moment‐based estimate}
\item{Binomial, Poisson, Cox}{Always \code{1}}
}
}
\description{
Estimate the dispersion (scale) parameter for two-parameter GLM families
(Gaussian, Gamma, inverse Gaussian) using either Pearson or deviance residuals.
For one-parameter families (binomial, Poisson) and Cox, the dispersion remains 1.
}
\details{
The Pearson estimate is
\deqn{\hat{\phi} = \frac{\sum_i (y_i - \mu_i)^2 / V(\mu_i)}{n - p},}
and the deviance estimate is
\deqn{\hat{\phi} = \frac{\sum_i d_i}{n - p},}
where \eqn{d_i} are the deviance residuals returned by
\code{family\$}\code{dev.resids}\eqn{(y, \mu, wt)}.  Here, \eqn{p} is the number of estimated
parameters (intercept + slopes); for a univariate slope-only model, one may set
\eqn{p = 1}, but by default we use \eqn{p = 0} when only updating dispersion.
}
\examples{
\donttest{
# Gaussian with known offset
y <- rnorm(100, mean = 2)
off <- rep(1, 100)
update_dispersion(y, gaussian(), offset = off, approach = "pearson")

# Gamma model
y <- rgamma(100, shape = 2, scale = 3)
off <- rep(0, 100)
update_dispersion(y, Gamma(link = "log"), offset = off, approach = "deviance")

# Poisson (dispersion fixed at 1)
y <- rpois(100, lambda = 5)
update_dispersion(y, poisson(), offset = 0)
}
}
