% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Rinternal.R
\name{univariate_fit}
\alias{univariate_fit}
\title{Compute Univariate Fit with Optional Truncated‐L1 Penalty}
\arguments{
\item{x}{Numeric vector of covariate values (length n); a scalar expands to zeros.}

\item{y}{Response:
\itemize{
\item For GLMs: numeric vector of length n.
\item For Cox: numeric matrix with 2 columns (time, status) and n rows.
}}

\item{family}{A stats::family object (e.g. \code{gaussian()}, \code{binomial()}, \code{poisson()})
or a Cox family list with \code{family = "cox"}.}

\item{offset}{Numeric scalar or vector (length n) giving the linear predictor offset (default: 0).}

\item{standardize}{Logical: if TRUE, center and scale \code{x} before fitting (default: TRUE).}

\item{ties}{Character: ties method for Cox partial likelihood ("efron" or "breslow", default: "efron").}

\item{lambda}{Numeric penalty weight; if \code{NULL} or ≤ 0, defaults to \eqn{\sqrt{2\log(n)/n}}.}

\item{tau}{Numeric truncation parameter; if \code{NULL} or ≤ 0, defaults to 0.5.}

\item{null_threshold}{Numeric threshold below which the final \code{theta} is set to zero (default: 1e-6).}

\item{max_iter}{Integer: maximum number of IRLS iterations (default: 25).}

\item{tol}{Numeric convergence tolerance on \code{theta} updates (default: 1e-8).}
}
\value{
A list with elements:
\item{theta}{Estimated coefficient (after undoing standardization).}
\item{loglik}{Unpenalized log-likelihood at the estimated \code{theta}.}
\item{bic}{Bayesian Information Criterion: \eqn{-2*loglik + 2\log(n)}.}
}
\description{
Fits a single‐covariate model (GLM or Cox) with optional standardization and
a truncated‐L1 penalty on the coefficient.  For GLMs it uses IRLS with a
capped‐L1 update; for Cox it uses a penalized IRLS on the partial likelihood.
}
\examples{
\dontrun{
set.seed(101)
n <- 50
x <- rnorm(n)
# Gaussian GLM
y_gauss <- 1.5*x + rnorm(n)
res1 <- univariate_fit(x, y_gauss, family = gaussian(), offset = 0)

# Cox example
times  <- rexp(n, rate = exp(0.7*x))
status <- rbinom(n, 1, 0.6)
y_cox  <- cbind(time=times, status=status)
res2 <- univariate_fit(x, y_cox, family = list(family="cox"))
}
}
