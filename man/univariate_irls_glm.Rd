% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Rinternal.R
\name{univariate_irls_glm}
\alias{univariate_irls_glm}
\title{Compute Generalized Linear Model Estimate for Univariate Predictor with Intercept}
\arguments{
\item{x}{Numeric vector of covariates (length n).}

\item{y}{Numeric response vector (length n).}

\item{family}{A stats::family object (e.g. \code{gaussian()},
\code{binomial()}, \code{poisson()}).}

\item{offset}{Numeric scalar or vector (length n) giving the linear predictor offset.}

\item{max_iter}{Integer. Maximum number of IRLS iterations.}

\item{tol}{Numeric convergence tolerance for parameters.}
}
\value{
A list with components:
\item{intercept}{Numeric scalar: the estimated intercept \eqn{\hat\beta_0}.}
\item{theta}{Numeric scalar: the estimated coefficient \eqn{\hat\beta_1}.}
}
\description{
Fits a GLM with intercept and single predictor using iteratively reweighted least squares (IRLS).
Implements the model:
\deqn{g(E[y]) = \beta_0 + \beta_1 x + \text{offset}}
where \eqn{g} is the link function determined by the selected family.
}
\details{
This function implements the standard IRLS algorithm for GLMs, optimized for the
univariate predictor case with intercept. It provides identical results to R's
\code{glm(y ~ x, family=family)} but is more computationally efficient for
the single-predictor case.

Numerical stability measures are implemented for handling extreme values, including
special cases for Poisson regression and fallback methods for matrix solution if
the standard solve fails.
}
\examples{
\dontrun{
set.seed(42)
n <- 100
x <- rnorm(n)

# Gaussian example
y_gaussian <- 2 + 0.5*x + rnorm(n)
result <- univariate_irls_glm(x, y_gaussian, gaussian(), offset=numeric(0))
print(result)

# Poisson example
eta <- 1 + 0.5*x
y_poisson <- rpois(n, exp(eta))
result <- univariate_irls_glm(x, y_poisson, poisson(), offset=numeric(0))
print(result)

# Binomial example
prob <- 1/(1 + exp(-(0.5 + 0.8*x)))
y_binomial <- rbinom(n, 1, prob)
result <- univariate_irls_glm(x, y_binomial, binomial(), offset=numeric(0))
print(result)
}
}
